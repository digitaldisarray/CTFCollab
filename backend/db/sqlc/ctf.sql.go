// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ctf.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCTF = `-- name: CreateCTF :execresult
INSERT INTO ctfs (
    name, description, start_date, end_date, author_id
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateCTFParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	AuthorID    int32     `json:"author_id"`
}

func (q *Queries) CreateCTF(ctx context.Context, arg CreateCTFParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCTF,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.AuthorID,
	)
}

const deleteCTF = `-- name: DeleteCTF :exec
DELETE FROM ctfs
WHERE id = ?
`

func (q *Queries) DeleteCTF(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCTF, id)
	return err
}

const listCTFs = `-- name: ListCTFs :many
SELECT id, name, description, start_date, end_date, author_id FROM ctfs
ORDER BY start_date
`

func (q *Queries) ListCTFs(ctx context.Context) ([]Ctf, error) {
	rows, err := q.db.QueryContext(ctx, listCTFs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ctf
	for rows.Next() {
		var i Ctf
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCTF = `-- name: UpdateCTF :execresult
UPDATE ctfs
SET
    name = ?,
    description = ?,
    start_date = ?,
    end_date = ?
WHERE id = ?
`

type UpdateCTFParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	StartDate   time.Time `json:"start_date"`
	EndDate     time.Time `json:"end_date"`
	ID          int32     `json:"id"`
}

func (q *Queries) UpdateCTF(ctx context.Context, arg UpdateCTFParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCTF,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
}
