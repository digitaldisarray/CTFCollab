// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: guest.sql

package db

import (
	"context"
	"database/sql"
)

const createGuest = `-- name: CreateGuest :execresult
INSERT INTO guests (
    nickname
) VALUES (
    ?
)
`

func (q *Queries) CreateGuest(ctx context.Context, nickname string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGuest, nickname)
}

const getGuestByID = `-- name: GetGuestByID :one
SELECT id, nickname, last_seen, created_at FROM guests
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGuestByID(ctx context.Context, id int32) (Guest, error) {
	row := q.db.QueryRowContext(ctx, getGuestByID, id)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.LastSeen,
		&i.CreatedAt,
	)
	return i, err
}

const getGuestByName = `-- name: GetGuestByName :one
SELECT id, nickname, last_seen, created_at FROM guests
WHERE nickname = ? LIMIT 1
`

func (q *Queries) GetGuestByName(ctx context.Context, nickname string) (Guest, error) {
	row := q.db.QueryRowContext(ctx, getGuestByName, nickname)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.LastSeen,
		&i.CreatedAt,
	)
	return i, err
}

const markGuestSeen = `-- name: MarkGuestSeen :execresult
UPDATE guests
SET last_seen = CURRENT_TIMESTAMP
WHERE nickname = ?
`

func (q *Queries) MarkGuestSeen(ctx context.Context, nickname string) (sql.Result, error) {
	return q.db.ExecContext(ctx, markGuestSeen, nickname)
}

const pruneOldSessions = `-- name: PruneOldSessions :execresult
DELETE FROM guests
WHERE last_seen < DATE_SUB(NOW(), INTERVAL 3 MONTH)
`

func (q *Queries) PruneOldSessions(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, pruneOldSessions)
}
