// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :execresult
INSERT INTO sessions (
    cookie, nickname
) VALUES (
    ?, ?
)
`

type CreateSessionParams struct {
	Cookie   string
	Nickname string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSession, arg.Cookie, arg.Nickname)
}

const getSession = `-- name: GetSession :one
SELECT id, cookie, nickname, last_seen, created_at FROM sessions
WHERE cookie = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, cookie string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, cookie)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Cookie,
		&i.Nickname,
		&i.LastSeen,
		&i.CreatedAt,
	)
	return i, err
}

const pruneOldSessions = `-- name: PruneOldSessions :execresult
DELETE FROM sessions
WHERE last_seen < DATE_SUB(NOW(), INTERVAL 3 MONTH)
`

func (q *Queries) PruneOldSessions(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, pruneOldSessions)
}

const seenSession = `-- name: SeenSession :execresult
UPDATE sessions
SET last_seen = CURRENT_TIMESTAMP
WHERE cookie = ?
`

func (q *Queries) SeenSession(ctx context.Context, cookie string) (sql.Result, error) {
	return q.db.ExecContext(ctx, seenSession, cookie)
}
