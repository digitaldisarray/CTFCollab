// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: challenge.sql

package db

import (
	"context"
	"database/sql"
)

const createChallenge = `-- name: CreateChallenge :execresult
INSERT INTO challenges (ctf_id, name, description, flag, created_at, hedgedoc_url)
SELECT 
    ctfs.id,
    ? AS challenge_name,        -- Replace ? with the challenge name
    ? AS challenge_description, -- Replace ? with the challenge description
    ? AS challenge_flag,        -- Replace ? with the challenge flag
    CURRENT_TIMESTAMP,
    ? AS hedgedoc_url
FROM 
    ctfs
WHERE 
    ctfs.phrase = ?
`

type CreateChallengeParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Flag        string `json:"flag"`
	HedgedocUrl string `json:"hedgedoc_url"`
	Phrase      string `json:"phrase"`
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createChallenge,
		arg.Name,
		arg.Description,
		arg.Flag,
		arg.HedgedocUrl,
		arg.Phrase,
	)
}

const deleteChallenge = `-- name: DeleteChallenge :exec
DELETE FROM challenges
WHERE id = ?
`

func (q *Queries) DeleteChallenge(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteChallenge, id)
	return err
}

const getChallenge = `-- name: GetChallenge :one
SELECT id, ctf_id, name, description, flag, created_at, hedgedoc_url FROM challenges
WHERE id = ? LIMIT 1
`

func (q *Queries) GetChallenge(ctx context.Context, id int32) (Challenge, error) {
	row := q.db.QueryRowContext(ctx, getChallenge, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.CtfID,
		&i.Name,
		&i.Description,
		&i.Flag,
		&i.CreatedAt,
		&i.HedgedocUrl,
	)
	return i, err
}

const getFlag = `-- name: GetFlag :one
SELECT flag FROM challenges
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFlag(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getFlag, id)
	var flag string
	err := row.Scan(&flag)
	return flag, err
}

const setFlag = `-- name: SetFlag :execresult
UPDATE challenges
SET flag = ?
WHERE id = ?
`

type SetFlagParams struct {
	Flag string `json:"flag"`
	ID   int32  `json:"id"`
}

func (q *Queries) SetFlag(ctx context.Context, arg SetFlagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, setFlag, arg.Flag, arg.ID)
}

const updateChallenge = `-- name: UpdateChallenge :execresult
UPDATE challenges
SET
    name = COALESCE(?, name),
    description = COALESCE(?, description),
    flag = COALESCE(?, flag)
WHERE id = ?
`

type UpdateChallengeParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Flag        sql.NullString `json:"flag"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateChallenge(ctx context.Context, arg UpdateChallengeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateChallenge,
		arg.Name,
		arg.Description,
		arg.Flag,
		arg.ID,
	)
}

const updateChallengeFlag = `-- name: UpdateChallengeFlag :exec
UPDATE challenges
SET flag = ?
WHERE id = ?
`

type UpdateChallengeFlagParams struct {
	Flag string `json:"flag"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateChallengeFlag(ctx context.Context, arg UpdateChallengeFlagParams) error {
	_, err := q.db.ExecContext(ctx, updateChallengeFlag, arg.Flag, arg.ID)
	return err
}
